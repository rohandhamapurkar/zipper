name: Rust Multi-Platform Build

on:
  push:
    tags:
      - 'v*'
  # Allow manual trigger
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: linux-amd64
          
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: darwin-amd64

          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: darwin-arm64
            
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: windows-amd64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Prepare artifacts
      shell: bash
      run: |
        mkdir -p artifacts
        PACKAGE_NAME=$(grep -m1 'name *=' Cargo.toml | cut -d '"' -f2 | cut -d "'" -f2)
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/*.exe artifacts/$PACKAGE_NAME-${{ matrix.artifact_name }}.exe
        else
          cp "target/${{ matrix.target }}/release/$PACKAGE_NAME" artifacts/$PACKAGE_NAME-${{ matrix.artifact_name }}
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binary-${{ matrix.artifact_name }}
        path: artifacts/*
        retention-days: 7

  # Optional: Create a release with all binaries
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write # This is required for creating releases
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare Release Assets
        run: |
          mkdir release-assets
          find artifacts -type f -exec cp {} release-assets/ \;

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release-assets/*
          generate_release_notes: true
